if [ -f ~/.zsh_theme ]; then
    . ~/.zsh_theme
fi

# Use vim for editor and terminal
export EDITOR='vim'
bindkey -v

# For home and end keys
bindkey "\e[1~" beginning-of-line
bindkey "\e[4~" end-of-line

alias ll='ls -alF'

if [ -d ~/.nvm ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
  export NODE_PATH="/usr/lib/nodejs:/usr/lib/node_modules:/usr/share/javascript:$HOME/.nvm/versions/node/v6.10.3/lib/node_modules"

  # This seems to be a requirement for nvm to work with zsh,
  # as documented here: https://github.com/creationix/nvm#zsh
  autoload -U add-zsh-hook
  load-nvmrc() {
    local node_version="$(nvm version)"
    local nvmrc_path="$(nvm_find_nvmrc)"

    if [ -n "$nvmrc_path" ]; then
      local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

      if [ "$nvmrc_node_version" = "N/A" ]; then
	nvm install
      elif [ "$nvmrc_node_version" != "$node_version" ]; then
	nvm use
      fi
    elif [ "$node_version" != "$(nvm version default)" ]; then
      echo "Reverting to nvm default version"
      nvm use default
    fi
  }
  add-zsh-hook chpwd load-nvmrc
  load-nvmrc
fi

if [ -d ~/.pyenv ]; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
fi

# Single user RBenv
if [ -d ~/.rbenv ]; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
  export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"
fi

# Shared RBenv
if [ -d /usr/local/rbenv ]; then
  export RBENV_ROOT=/usr/local/rbenv
  export PATH="$RBENV_ROOT/bin:$PATH"
  eval "$(rbenv init -)"
  export PATH="$RBENV_ROOT/plugins/ruby-build/bin:$PATH"
fi

if [ -d ~/scripts ]; then
  export PATH="$HOME/scripts:$PATH"
fi

if [ -d ~/Apps ]; then
  export PATH="$HOME/Apps:$PATH"
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if [ -f ~/.bash_rails ]; then
    . ~/.bash_rails
fi

# If filename generation has no matches, hide error
# This is needed to pass arguments into rake tasks
unsetopt nomatch
